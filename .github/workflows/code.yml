name: Code

on:
  workflow_dispatch:

jobs:
  build-upload:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: "Setup yq"
        uses: dcarbone/install-yq-action@v1.1.1
      - name: "Configure AWS credentials"
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          mask-aws-account-id: true
      - name: "Build and Upload"
        run: |
          file_paths=$(find runtimes -type f -name build.sh -exec dirname {} \;)

          parameters_json=$(yq -o=json '.' parameters.yml)

          bucket_name=$(jq -r ".bucket_name' <<< "$parameters_json")

          for file_path in $file_paths
          do
            echo "::group::Processing '$file_path'..."

            manifest_json=$(yq -o=json '.' "$file_path/manifest.yml" -j)

            architectures=$(jq -r '.architectures[]' <<< "$manifest_json")
            memory_sizes=$(jq -r '.memory_sizes[]' <<< "$parameters_json")
            path=$(jq -r '.path' <<< "$manifest_json")

            chmod +x "$file_path/build.sh"

            for arch in $architectures
            do
              echo "::group::Building '$file_path' [$arch]..."
              (cd "$file_path" && ./build.sh "$arch")
              echo "Building '$file_path' [$arch] completed"
              echo "::endgroup::"

              zip="code_${path}_${arch}.zip"
              file="${file_path}/${zip}"
              s3_key="runtimes/${zip}"

              if [ -f "$file" ]; then
                aws s3 cp "$file" "s3://$bucket_name/runtimes/" > /dev/null 2>&1
                echo "Uploaded '$file' to 's3://$bucket_name/runtimes/'"
          
                for memory_size in $memory_sizes
                do
                  function_name="lbd-benchmark-${path}-${arch//_/-}-${memory_size}"
                  aws lambda update-function-code --function-name $function_name --s3-bucket $bucket_name --s3-key $s3_key > /dev/null 2>&1
                  echo "Updated '$function_name' with '$file'"
                done
              else
                echo "File '$file' does not exist. Skipping upload."
              fi
            done
            echo "::endgroup::"
          done
